/**
 * Build workflow guidelines
 * api -> (fabric, forge, legacy, neoforge) -> (1.12, 1.16, 1.18, 1.19, 1.20, 1.21) -> (minor versions) -> main
 * Shading and relocation must happen within each module to properly respect reobfuscation.
 * Any necessary reobfuscations must happen in the version the deobfuscations happened in.
 */

apply from: rootProject.file('buildSrc\\shared.gradle')
java.toolchain.languageVersion = JavaLanguageVersion.of(23)

def api = project(':api')
def fabric = project(':fabric')
def legacy_1_12_2 = project(':legacy:legacy.1_12')
def fabric_1_16_5 = project(':fabric:fabric.1_16')
def forge_1_16_5 = project(':forge:forge.1_16')

processResources {
    fabric.afterEvaluate { from(it.processResources.outputs) }
}

processTestResources {
    fabric.afterEvaluate { from(it.processTestResources.outputs) }
}

jar {
    legacy_1_12_2.afterEvaluate { from(it.shadowJar.archiveFile.collect { zipTree(it) }) }
    fabric_1_16_5.afterEvaluate { from(it.remapJar.archiveFile.collect { zipTree(it) }) }
    forge_1_16_5.afterEvaluate { from(it.shadowJar.archiveFile.collect { zipTree(it) }) }
    manifest {
        attributes([
                'FMLAT': 'theimpossiblelibrary_at.cfg',
                'FMLCorePlugin': "${legacy_1_12_2.mod_plugin}1_12_2",
                'ForceLoadAsMod': true,
                'Implementation-Title': name,
                'Implementation-Version': version,
                'TILMultiversionMods': api.common_entrypoint
        ])
    }
}

[ ':legacy:legacy.1_12:build',
  ':fabric:fabric.1_16:build',
  ':forge:forge.1_16:build' ].forEach { tasks.jar.dependsOn(it) }