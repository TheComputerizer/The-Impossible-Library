//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'net.minecraftforge.gradle' version '5.1+'
    id 'com.github.johnrengelman.shadow' version '7.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${project.parchment_version}-${project.minecraft_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                theimpossiblelibrary {
                    source sourceSets.main
                }
            }
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                theimpossiblelibrary {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = uri("https://www.cursemaven.com")
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    //external dependencies
    shade("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {  //for toml files
        exclude group: 'com.google.code.gson', module: 'gson'
    }
}

shadowJar {
    //necessary relocation
    relocate 'com.moandjiezana.toml', "${project.shadow_group}.moandjiezana.toml"
    configurations = [project.configurations.shadow]
    classifier ''
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
    exclude '**/theimpossiblelibrary/test/**'
}

jar {
    manifest {
        attributes([
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.assemble.dependsOn shadowJar