//file:noinspection DependencyNotationArgument
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'idea'
    id 'java'
    id 'java-library'
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

dependencies {
    shadow(project(':legacy:legacy.1_12')) { transitive = false }
    shadow(project(':forge:forge.1_16')) { transitive = false }
    shadow("com.moandjiezana.toml:toml4j:${project.toml4j_version}") { transitive = false }
    shadow("org.joml:joml:${project.joml_version}") { transitive = false }
}

shadowJar {
    //relocate shaded dependencies to the shadow package to prevent library conflicts
    relocate 'com.moandjiezana.toml', "${shadow_package}.com.moandjiezana.toml"
    relocate 'org.joml', "${shadow_package}.org.joml"
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    exclude '**/*.java'
}

tasks.assemble.dependsOn('shadowJar')

allprojects {
    group = project.base_package
    version = project.mod_version

    java {
        archivesBaseName = project.mod_id
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    plugins.apply('idea')
    plugins.apply('java')
    plugins.apply('java-library')

    dependencies {
        annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

        compileOnly("org.projectlombok:lombok:${project.lombok_version}")

        implementation("com.moandjiezana.toml:toml4j:${project.toml4j_version}") { transitive = false }
        implementation("org.joml:joml:${project.joml_version}")
    }
}