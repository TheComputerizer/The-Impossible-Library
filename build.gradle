//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'net.minecraftforge.gradle' version '5.1+'
    id 'com.github.johnrengelman.shadow' version '7.1.+'
}

version = '1.16.5-0.2.2'
group = 'mods.thecomputerizer.theimpossiblelibrary'
archivesBaseName = 'theimpossiblelibrary'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url = uri('https://m2.dv8tion.net/releases')
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.29'

    //external dependencies
    shade("com.moandjiezana.toml:toml4j:0.7.2") {
        exclude group: 'com.google.code.gson', module: 'gson'  //for toml files
    }
}

shadowJar {
    // relocate so the classpath is not identical to anything else that might also be shading the same things
    relocate 'com.moandjiezana.toml', 'libraries.com.moandjiezana.toml'
    configurations = [project.configurations.shadow]
    classifier ''
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "theimpossiblelibrary",
                "Specification-Vendor": "the_computerizer",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"the_computerizer",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.assemble.dependsOn shadowJar