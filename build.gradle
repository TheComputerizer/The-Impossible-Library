plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'idea'
    id 'java'
    id 'java-library'
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(21))

dependencies {
    shadow(project(':legacy:legacy.1_12')) { transitive = false }
    shadow(project(':forge:forge.1_16')) { transitive = false }
    shadow("com.moandjiezana.toml:toml4j:${toml4j_version}") { transitive = false }
    shadow("org.joml:joml:${joml_version}") { transitive = false }
}

shadowJar {
    //relocate shaded dependencies to the shadow package to prevent library conflicts
    [ 'com.moandjiezana.toml', 'org.joml' ].forEach { pkg -> { relocate pkg, "${shadow_package}.${pkg}" } }
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    exclude 'module-info.*'
}

jar {
    manifest {
        attributes([
                'FMLAT': 'theimpossiblelibrary_at.cfg',
                'FMLCorePlugin': "mods.thecomputerizer.theimpossiblelibrary.legacy.v12.m2.${mod_plugin}1_12_2",
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true,
                'Implementation-Title': project.name,
                'TILMultiversionMods': 'mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint'
        ])
    }
}

tasks.assemble.dependsOn('shadowJar')

allprojects {
    group = project.base_package
    version = project.mod_version

    java {
        archivesBaseName = project.mod_id
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    plugins.apply('idea')
    plugins.apply('java')
    plugins.apply('java-library')

    dependencies {
        annotationProcessor("org.projectlombok:lombok:${lombok_version}")

        compileOnly("org.projectlombok:lombok:${lombok_version}")

        implementation("com.moandjiezana.toml:toml4j:${toml4j_version}") { transitive = false }
        implementation("org.joml:joml:${joml_version}") { transitive = false }
    }
}