buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone',
                  'com.google.guava', 'com.google.j2objc', 'com.machinezoo', 'com.machinezoo.noexception',
                  'commons-codec', 'commons-io', 'commons-logging', 'de.siegmar', 'io.github.goooler.shadow',
                  'it.unimi.dsi', 'net.sf.jopt-simple', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.httpcomponents', 'org.apache.logging.log4j', 'org.apache.maven', 'org.checkerframework',
                  'org.codehaus.plexus', 'org.codehaus.woodstox','org.jdom', 'org.jetbrains', 'org.jetbrains.kotlin',
                  'org.ow2.asm', 'org.slf4j', 'org.tukaani', 'org.vafer' ].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Forge'
            url = uri('https://maven.minecraftforge.net/')
            content {
                [ 'net.minecraftforge', 'net.minecraftforge.gradle' ].forEach{ includeGroup it }
            }
        }
        maven {
            name = 'Garden of Fancy'
            url = uri('https://maven.gofancy.wtf/releases')
            content {
                includeGroup 'wtf.gofancy.fancygradle'
            }
        }
    }
    dependencies {
        classpath("${shadow_plugin}:${shadow_version}")
        classpath("${forge_gradle_plugin}:${forge_gradle_version}")
        classpath("${fancy_gradle_plugin}:${fancy_gradle_version}")
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('net.minecraftforge.gradle')
plugins.apply('wtf.gofancy.fancygradle')

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

sourceSets {
    main.output.resourcesDir = rootProject.file('legacy/1.12/run_client/TILResources')
}

minecraft {
    mappings channel: 'stable', version: legacy_mappings_1_12_2
    accessTransformer = file("${meta_inf_path}/${mod_accesstransformer}")
    runs {
        def args = [ dev_arg, common_entrypoint_arg, core_entrypoint_arg ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', forge_log_level
            //noinspection GroovyAssignabilityCheck
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', forge_log_level
            //noinspection GroovyAssignabilityCheck
            jvmArgs args
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'BlameJared'
        url = uri('https://maven.blamejared.com')
        content {
            [ 'bookshelf', 'gamestages' ].forEach {includeGroup "net.darkhax.${it}"}
        }
    }
    maven {
        name = 'ModMaven'
        url = uri('https://modmaven.dev')
        content {
            includeGroup( 'mezz.jei')
        }
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("${forge_mc}:${forge_1_12_2}")

    annotationProcessor("${gson_artifact}:${gson_annotation}")
    annotationProcessor("${guava_artifact}:${guava_annotation}")

    //TODO Figure out if this works in dev
    compileOnly(fg.deobf("${dynamic_surroundings_artifact}:${dynamic_surroundings_1_12_2}"))
    compileOnly(fg.deobf("${orelib_artifact}:${orelib_1_12_2}"))

    implementation(project(':api'))
    implementation(project(':legacy'))

    //mod support dependencies
    implementation(fg.deobf("${bloodmoon_artifact}:${bloodmoon_1_12_2}"))
    implementation(fg.deobf("${bookshelf_artifact}-${bookshelf_1_12_2}"))
    implementation(fg.deobf("${champions_artifact}:${champions_1_12_2}"))
    implementation(fg.deobf("${coroutil_artifact}:${coroutil_1_12_2}"))
    implementation(fg.deobf("${game_stages_artifact}-${game_stages_1_12_2}"))
    implementation(fg.deobf("${infernal_mobs_artifact}:${infernal_mobs_1_12_2}"))
    implementation(fg.deobf("${nyx_artifact}:${nyx_1_12_2}"))
    implementation(fg.deobf("${serene_seasons_artifact}:$serene_seasons_1_12_2}"))
    implementation(fg.deobf("${weather2_remastered_artifact}:${weather2_1_12_2}"))

    runtimeOnly(fg.deobf("${jei_artifact}:${jei_1_12_2}"))
}

compileJava {
    source(project(':api').sourceSets.main.allJava,
            project(':legacy').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':api').sourceSets.test.allJava,
            project(':legacy').sourceSets.test.allJava)
}

processResources {
    from(project(':legacy').processResources.outputs)
}

processTestResources {
    from(project(':legacy').processTestResources.outputs)
}

jar {
    from(project(':legacy').jar.archiveFile.collect { zipTree(it) })
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'FMLCorePlugin': legacy_entrypoint,
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true
        ])
    }
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

shadowJar {
    from(project(':api').jar.archiveFile.collect { zipTree(it) })
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')
tasks.jar.dependsOn(':legacy:build')