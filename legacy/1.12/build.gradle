buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone',
                  'com.google.guava', 'com.google.j2objc', 'com.machinezoo', 'com.machinezoo.noexception',
                  'commons-codec', 'commons-io', 'commons-logging', 'de.siegmar', 'io.github.goooler.shadow',
                  'it.unimi.dsi', 'net.sf.jopt-simple', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.httpcomponents', 'org.apache.logging.log4j', 'org.apache.maven', 'org.checkerframework',
                  'org.codehaus.plexus', 'org.codehaus.woodstox','org.jdom', 'org.jetbrains', 'org.jetbrains.kotlin',
                  'org.ow2.asm', 'org.slf4j', 'org.tukaani', 'org.vafer' ].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Forge'
            url = uri('https://maven.minecraftforge.net/')
            content {
                [ 'net.minecraftforge', 'net.minecraftforge.gradle' ].forEach{ includeGroup it }
            }
        }
        maven {
            name = 'Garden of Fancy'
            url = uri('https://maven.gofancy.wtf/releases')
            content {
                includeGroup 'wtf.gofancy.fancygradle'
            }
        }
    }
    dependencies {
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
        classpath('net.minecraftforge.gradle:net.minecraftforge.gradle.gradle.plugin:6.+')
        classpath('wtf.gofancy.fancygradle:wtf.gofancy.fancygradle.gradle.plugin:1.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('net.minecraftforge.gradle')
plugins.apply('wtf.gofancy.fancygradle')

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

sourceSets {
    main.output.resourcesDir = rootProject.file('legacy\\1.12\\run_client\\TILResources')
}

minecraft {
    mappings channel: 'stable', version: mappings_version
    accessTransformer = file("src/main/resources/META-INF/${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true',
                '-DtilClassPathMods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint'
        ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'BlameJared'
        url = uri('https://maven.blamejared.com')
        content {
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

    annotationProcessor("com.google.code.gson:gson:${gson_annotation}")
    annotationProcessor("com.google.guava:guava:${guava_annotation}")

    //TODO Figure out if this works in dev
    compileOnly(fg.deobf("curse.maven:dsurround-238891:${dsurround_version}"))
    compileOnly(fg.deobf("curse.maven:orelib-307806:${orelib_version}"))

    implementation(project(':api'))

    //mod support dependencies
    implementation(fg.deobf("curse.maven:bloodmoon-226321:${bloodmoon_version}"))
    implementation(fg.deobf("net.darkhax.bookshelf:Bookshelf-${minecraft_version}:${bookshelf_version}"))
    implementation(fg.deobf("curse.maven:champions-307152:${champions_version}"))
    implementation(fg.deobf("curse.maven:coroutil-237749:${coroutil_version}"))
    implementation(fg.deobf("net.darkhax.gamestages:GameStages-${minecraft_version}:${gamestages_version}"))
    implementation(fg.deobf("curse.maven:infernalmobs-227875:${infernal_version}"))
    implementation(fg.deobf("curse.maven:nyx-349214:${nyx_version}"))
    implementation(fg.deobf("curse.maven:sereneseasons-291874:$seasons_version}"))
    implementation(fg.deobf("curse.maven:weather2-695602:${weather_version}"))

    runtimeOnly(fg.deobf("curse.maven:hei-557549:${hei_version}"))
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    from(project(':legacy').processResources.outputs)
}

processTestResources {
    from(project(':legacy').processTestResources.outputs)
}

compileJava {
    source(project(':api').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':api').sourceSets.test.allJava)
}

jar {
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'FMLCorePlugin': "${module_package}.${mod_plugin}1_12_2",
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true,
                "Implementation-Title": project.name,
                'TILMultiversionMods': 'mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint'
        ])
    }
}

shadowJar {
    from(project(':legacy').jar.archiveFile.collect { zipTree(it) })
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')
tasks.jar.dependsOn(':legacy:build')