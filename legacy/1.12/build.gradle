plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(8))

minecraft {
    mappings channel: 'stable', version: mappings_version
    accessTransformer = file("src/main/resources/META-INF/${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true'
        ]
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    annotationProcessor("com.google.code.gson:gson:${project.gson_annotation}")
    annotationProcessor("com.google.guava:guava:${project.guava_annotation}")
    annotationProcessor("org.ow2.asm:asm-debug-all:${project.asm_debug_annotation}")

    implementation project(':legacy')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    //exclude '**/theimpossiblelibrary/test/**'
}

jar {
    manifest {
        attributes([
                "Implementation-Title": project.name,
                'FMLAT': mod_accesstransformer
        ])
    }
}

//Spec<Task> noForge = { Task it -> !it.name.startsWith("forge") } as Spec<Task>

tasks.withType(JavaCompile).configureEach {
    source(project(':api').sourceSets.main.allJava)
}

tasks.withType(Javadoc).configureEach {
    source(project(":api").sourceSets.main.allJava)
}

tasks.withType(ProcessResources).configureEach {
    from project(":api").sourceSets.main.resources
}