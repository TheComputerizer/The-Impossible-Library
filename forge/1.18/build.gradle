/**
 * Shared implementations for anything based in 1.16. Compiles against Forge
 */
//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml', 'com.fasterxml.jackson', 'com.fasterxml.woodstox', 'com.google.code.findbugs',
                  'com.google.code.gson', 'com.google.errorprone', 'com.google.guava', 'com.google.j2objc',
                  'com.machinezoo.noexception', 'commons-codec', 'commons-io', 'commons-logging', 'de.siegmar',
                  'io.fabric8', 'io.github.goooler.shadow', 'io.netty', 'it.unimi.dsi', 'jakarta.platform',
                  'net.sf.jopt-simple', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.httpcomponents', 'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jetty', 'org.jdom', 'org.junit', 'org.mockito', 'org.ow2',
                  'org.ow2.asm', 'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.tukaani',
                  'org.vafer' ].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Forge'
            url = uri('https://maven.minecraftforge.net/')
            content {
                [ 'net.minecraftforge', 'net.minecraftforge.gradle' ].forEach{ includeGroup it }
            }
        }
        maven {
            name = 'ParchmentMC'
            url = uri('https://maven.parchmentmc.org')
            content {
                [ 'org.parchmentmc', 'org.parchmentmc.feather',
                  'org.parchmentmc.librarian.forgegradle' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
        classpath('net.minecraftforge.gradle:net.minecraftforge.gradle.gradle.plugin:6.+')
        classpath('org.parchmentmc.librarian.forgegradle:org.parchmentmc.librarian.forgegradle.gradle.plugin:1.+')
    }
}

apply from: rootProject.file('gradle\\java17-module.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('net.minecraftforge.gradle')
plugins.apply('org.parchmentmc.librarian.forgegradle')

minecraft {
    mappings channel: 'parchment', version: "${parchment_1_18_2}-${minecraft_1_18_2}"
    runs {
        def args = [
                '-Dtil.dev=true',
                "-Dtil.classpath.mods=${common_entrypoint}",
                "-Dtil.classpath.coremods=${core_entrypoint}"
        ]
        configureEach {
            def srgToMcpFile = project.tasks.createSrgToMcp.outputs.files[0].path
            property 'net.minecraftforge.gradle.GradleStart.srg.srg-mcp', srgToMcpFile
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', srgToMcpFile
        }
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'trace'
            jvmArgs args
            mods {
                theimpossiblelibrary {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
            mods {
                theimpossiblelibrary {
                    source sourceSets.main
                }
            }
        }
    }
}

def shared = project(':shared:1.18')

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${minecraft_1_18_2}-${forge_1_18_2}")

    implementation(project(':api'))
    implementation(project(path: ':forge', configuration: 'dev'))
    implementation(shared)
}

compileJava {
    source(project(':api').sourceSets.main.allJava,
            project(':forge').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':api').sourceSets.test.allJava,
            project(':forge').sourceSets.test.allJava)
}

processResources {
    from(project(':forge').processResources.outputs)
}

processTestResources {
    from(project(':forge').processTestResources.outputs)
}

jar {
    from(project(':forge').jar.archiveFile.collect { zipTree(it) })
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

shadowJar {
    from(project(':api').jar.archiveFile.collect { zipTree(it) })
    shared.afterEvaluate {
        from(shared.jar.archiveFile.collect { zipTree(it) })
        relocate "${shared_base_package}", "${forge_base_package}"
    }
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')
tasks.jar.dependsOn(':forge:build')