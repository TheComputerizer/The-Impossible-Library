//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml', 'com.fasterxml.jackson', 'com.fasterxml.woodstox', 'com.google.code.findbugs',
                  'com.google.code.gson', 'com.google.errorprone', 'com.google.guava', 'com.google.j2objc',
                  'com.machinezoo.noexception', 'commons-codec', 'commons-io', 'commons-logging', 'de.siegmar',
                  'io.fabric8', 'io.github.goooler.shadow', 'io.netty', 'it.unimi.dsi', 'jakarta.platform',
                  'net.sf.jopt-simple', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.httpcomponents', 'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jetty', 'org.jdom', 'org.junit', 'org.mockito', 'org.ow2',
                  'org.ow2.asm', 'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.tukaani',
                  'org.vafer' ].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Forge'
            url = uri('https://maven.minecraftforge.net/')
            content {
                [ 'net.minecraftforge', 'net.minecraftforge.gradle', 'org.spongepowered' ].forEach{ includeGroup it }
            }
        }
        maven {
            name = 'ParchmentMC'
            url = uri('https://maven.parchmentmc.org')
            content {
                [ 'org.parchmentmc', 'org.parchmentmc.feather',
                  'org.parchmentmc.librarian.forgegradle' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
        classpath('net.minecraftforge.gradle:net.minecraftforge.gradle.gradle.plugin:6.+')
        classpath('org.spongepowered:mixingradle:0.+')
        classpath('org.parchmentmc.librarian.forgegradle:org.parchmentmc.librarian.forgegradle.gradle.plugin:1.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('net.minecraftforge.gradle')
plugins.apply('org.spongepowered.mixin')
plugins.apply('org.parchmentmc.librarian.forgegradle')

minecraft {
    mappings channel: 'parchment', version: "${parchment_base_version}-${minecraft_base_version}"
    accessTransformer = file("src/main/resources/META-INF/${mod_accesstransformer}")
    runs {
        def args = [
                '-DtilDev=true',
                '-DtilClassPathMods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint'
        ]
        configureEach {
            def srgToMcpFile = project.tasks.createSrgToMcp.outputs.files[0].path
            property 'net.minecraftforge.gradle.GradleStart.srg.srg-mcp', srgToMcpFile
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', srgToMcpFile
        }

        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
    }
}

repositories {
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'BlameJared'
        url = uri('https://maven.blamejared.com')
        content {
            includeGroup 'net.darkhax.bookshelf'
            includeGroup 'net.darkhax.gamestages'
        }
    }
    maven {
        name = 'Modding Legacy'
        url = uri('https://maven.moddinglegacy.com/maven')
        content {
            includeGroup 'com.legacy'
        }
    }

    maven {
        name = 'Progwml6 Maven'
        url = uri('https://dvs1.progwml6.com/files/maven/')
        content {
            includeGroup 'mezz.jei'
        }
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft("net.minecraftforge:forge:${minecraft_base_version}-${forge_base_version}")

    implementation(project(':api')) //TODO Figure out why this needs implementation while 1.12.2 can be runtimeOnly
    implementation(project(':shared:shared.1_16'))
    implementation(project(':forge'))

    //mod support dependencies
    implementation(fg.deobf("curse.maven:betterweather-400714:${betterweather_version}"))
    implementation(fg.deobf("curse.maven:blueskies-312918:${blueskies_version}"))
    implementation(fg.deobf("curse.maven:champions-307152:${champions_version}"))
    implementation(fg.deobf("curse.maven:configured-457570:${configured_version}"))
    implementation(fg.deobf("curse.maven:dsurround-238891:${dsurround_version}"))
    implementation(fg.deobf("curse.maven:enhancedcelestials-438447:${enhancedcelestials_version}"))
    implementation(fg.deobf("curse.maven:sereneseasons-291874:${seasons_version}"))
    implementation(fg.deobf("curse.maven:structure-gel-378802:${structuregel_version}"))
    implementation(fg.deobf("net.darkhax.bookshelf:Bookshelf-${minecraft_base_version}:${bookshelf_version}"))
    implementation(fg.deobf("net.darkhax.gamestages:GameStages-Forge-${minecraft_base_version}:${gamestages_version}"))

    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_base_version}:${jei_version}"))
}

mixin {
    add sourceSets.main, mod_refmap
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    from(project(':forge').processResources.outputs)
}

processTestResources {
    from(project(':forge').processTestResources.outputs)
}

compileJava {
    source(project(':api').sourceSets.main.allJava,
            project(':shared:shared.1_16').sourceSets.main.allJava,
            project(':forge').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':api').sourceSets.test.allJava,
            project(':shared:shared.1_16').sourceSets.test.allJava,
            project(':forge').sourceSets.test.allJava)
}

jar {
    from(project(':forge').jar.archiveFile.collect { zipTree(it) })
    //from(project(':shared:shared.1_16').jar.archiveFile.collect { zipTree(it) })
    manifest {
        attributes([
                'FMLAT': mod_accesstransformer,
                'Implementation-Title': name,
                'Implementation-Version': version,
                'MixinConfigs': mod_mixin,
                'TweakClass': mod_tweakclass,
                'TweakOrder': 0
        ])
    }
}

shadowJar {
    from(project(':api').jar.archiveFile.collect { zipTree(it) })
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')
tasks.jar.dependsOn(':shared:shared.1_16:build')
tasks.jar.dependsOn(':forge:build')