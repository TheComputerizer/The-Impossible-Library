buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.fasterxml.jackson.core', 'com.fasterxml.jackson', 'com.fasterxml',
                  'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone', 'com.google.guava',
                  'com.google.j2objc', 'commons-io', 'io.fabric8', 'io.github.goooler.shadow', 'io.netty',
                  'jakarta.platform', 'me.jamiemansfield', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven', 'org.benf', 'org.cadixdev',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jdt', 'org.eclipse.jetty', 'org.eclipse.platform', 'org.jdom',
                  'org.jetbrains', 'org.jetbrains.kotlinx', 'org.junit', 'org.mockito', 'org.ow2', 'org.ow2.asm',
                  'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.vafer',
                  'org.zeroturnaround'].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Fabric'
            url = uri('https://maven.fabricmc.net/')
            content {
                [ 'fabric-loom', 'net.fabricmc', 'net.fabricmc.fabric-api' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('fabric-loom:fabric-loom.gradle.plugin:1.+')
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\fabric.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('fabric-loom')

def shared = project(':shared:shared.1_16')

dependencies {
    minecraft("com.mojang:minecraft:${shared.minecraft_version}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${shared.minecraft_version}:${shared.parchment_version}@zip")
    }

    implementation(project(':api'))
    implementation(project(':fabric'))
    //The shared module builds with forge but since it only touches vanilla code this is fine
    implementation(shared) { transitive = false }

    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${shared.fabric_version}+1.16")
}

remapJar {
    inputFile = tasks.shadowJar.archiveFile
}

processResources {
    from(project(':fabric').processResources.outputs)
}

processTestResources {
    from(project(':fabric').processTestResources.outputs)
}

compileJava {
    source(project(':api').sourceSets.main.allJava,
            shared.sourceSets.main.allJava,
            project(':fabric').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':api').sourceSets.test.allJava,
            shared.sourceSets.test.allJava,
            project(':fabric').sourceSets.test.allJava)
}

jar {
    from(project(':fabric').jar.archiveFile.collect { zipTree(it) })
    //from(shared.jar.archiveFile.collect { zipTree(it) })
    manifest {
        attributes([
                'Implementation-Title': name,
                'Implementation-Version': version
        ])
    }
}

tasks.remapJar.dependsOn('shadowJar')
tasks.jar.finalizedBy('remapJar')
tasks.jar.dependsOn(':shared:shared.1_16:build')
tasks.jar.dependsOn(':fabric:build')