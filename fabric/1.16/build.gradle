buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.fasterxml.jackson.core', 'com.fasterxml.jackson', 'com.fasterxml',
                  'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone', 'com.google.guava',
                  'com.google.j2objc', 'commons-io', 'io.fabric8', 'io.github.goooler.shadow', 'io.netty',
                  'jakarta.platform', 'me.jamiemansfield', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven', 'org.benf', 'org.cadixdev',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jdt', 'org.eclipse.jetty', 'org.eclipse.platform', 'org.jdom',
                  'org.jetbrains', 'org.jetbrains.kotlinx', 'org.junit', 'org.mockito', 'org.ow2', 'org.ow2.asm',
                  'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.vafer',
                  'org.zeroturnaround'].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Fabric'
            url = uri('https://maven.fabricmc.net/')
            content {
                [ 'fabric-loom', 'net.fabricmc', 'net.fabricmc.fabric-api' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('fabric-loom:fabric-loom.gradle.plugin:1.+')
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\fabric.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('fabric-loom')

def file = "build\\libs\\${mod_id}-${mod_version}.jar"
def classes = 'build\\classes\\java\\main'
def sources = "-Dtil.dev.sources=api\\${file};shared\\1.16\\${file};fabric\\1.16\\${classes}"
def args = [
        '-Dfabric.log.level=debug', '-Dtil.dev=true', sources, //'-Dtil.dev.testModLoading=true',
        '-Dtil.classpath.mods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint',
        '-Dtil.classpath.coremods=mods.thecomputerizer.theimpossiblelibrary.api.core.TILCoreEntryPoint'
]

[ runClient, runServer ].forEach { it.jvmArgs args}

repositories {
    maven {
        name 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
}

def shared = project(':shared:shared.1_16')

dependencies {
    minecraft("com.mojang:minecraft:${shared.minecraft_version}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${shared.minecraft_version}:${shared.parchment_version}@zip")
    }
    implementation(project(path: ':api', configuration: 'dev'))
    implementation(project(path: ':fabric', configuration: 'dev'))
    //The shared module builds with forge but since it only touches vanilla code this is fine
    implementation(project(path: ':shared:shared.1_16',configuration: 'dev'))

    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${shared.fabric_version}+1.16")
    modImplementation("maven.modrinth:cloth-config:${cloth_version}")
    modImplementation("maven.modrinth:modmenu:${modmenu_version}")
}

remapJar {
    inputFile = tasks.shadowJar.archiveFile
}

processResources {
    from(project(':api').processResources.outputs)
}

processTestResources {
    from(project(':api').processTestResources.outputs)
}

compileJava {
    source(project(':fabric').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':fabric').sourceSets.test.allJava)
}

jar {
    from(project(':fabric').jar.archiveFile.collect { zipTree(it) })
    manifest {
        attributes([
                'Implementation-Title': name,
                'Implementation-Version': version
        ])
    }
}

//Due to the shared forge base we need to remap some stuff so the version specific code can stay centralized
def remapThese = [ "block.AbstractBlock": "world.level.block.state.BlockBehaviour",
                   "block.BlockState": "world.level.block.state.BlockState",
                   "block.Block": "world.level.block.Block",
                   "block.material.MaterialColor": "world.level.material.MaterialColor",
                   "block.material.Material": "world.level.material.Material",
                   "client.util.ITooltipFlag": "world.item.TooltipFlag",
                   "command.CommandException": "commands.CommandRuntimeException",
                   "command.CommandSource": "commands.CommandSourceStack",
                   "command.ISuggestionProvider": "commands.SharedSuggestionProvider",
                   "command.": "commands.",
                   "entity.player.PlayerEntity": "world.entity.player.Player",
                   "entity.player.ServerPlayerEntity": "server.level.ServerPlayer",
                   "entity": "world.entity",
                   "item.AxeItem": "world.item.AxeItem",
                   "item.BlockItem": "world.item.BlockItem",
                   "item.HoeItem": "world.item.HoeItem",
                   "item.IItemPropertyGetter": "client.renderer.item.ItemPropertyFunction",
                   "item.IItemTier": "world.item.Tier",
                   "item.ItemStack": "world.item.ItemStack",
                   "item.ItemTier": "world.item.Tiers",
                   "item.ItemUseContext": "world.item.context.UseOnContext",
                   "item.ItemModelsProperties": "client.renderer.item.ItemProperties",
                   "item.Item": "world.item.Item",
                   "item.MusicDiscItem": "world.item.RecordItem",
                   "item.PickaxeItem": "world.item.PickaxeItem",
                   "item.ShovelItem": "world.item.ShovelItem",
                   "item.SwordItem": "world.item.SwordItem",
                   "item.ToolItem": "world.item.TieredItem",
                   "nbt.CompoundNBT": "nbt.CompoundTag",
                   "nbt.CompressedStreamTools": "nbt.NbtIo",
                   "nbt.INBT": "nbt.Tag",
                   "nbt.ListNBT": "nbt.ListTag",
                   "nbt.NBTSizeTracker": "nbt.NbtAccounter",
                   "nbt.NumberNBT": "nbt.NumericTag",
                   "nbt.StringNBT": "nbt.StringTag",
                   "server.management.PlayerList": "server.players.PlayerList",
                   "state.Property": "world.level.block.state.properties.Property",
                   "state.StateContainer": "world.level.block.state.StateDefinition",
                   "tileentity.TileEntity": "world.level.block.entity.BlockEntity",
                   "util.ActionResultType": "world.InteractionResult",
                   "util.Direction": "core.Direction",
                   "util.Hand": "world.InteractionHand",
                   "util.RegistryKey": "resources.ResourceKey",
                   "util.ResourceLocation": "resources.ResourceLocation",
                   "util.SoundEvent": "sounds.SoundEvent",
                   "util.math.AxisAlignedBB": "world.phys.AABB",
                   "util.math.BlockPos": "core.BlockPos",
                   "util.math.BlockRayTraceResult": "world.phys.BlockHitResult",
                   "util.registry.DynamicRegistries": "core.RegistryAccess",
                   "util.registry.MutableRegistry": "core.WritableRegistry",
                   "util.registry.Registry": "core.Registry",
                   "util.text.ITextComponent": "network.chat.Component",
                   "world.Explosion": "world.level.Explosion",
                   "world.IBlockReader": "world.level.BlockGetter",
                   "world.IWorld": "world.level.LevelAccessor",
                   "world.World": "world.level.Level" ]

shadowJar {
    shared.afterEvaluate {
        from(shared.jar.archiveFile.collect { zipTree(it) })
        //noinspection GroovyAssignabilityCheck
        relocate shared.shared_base_package, fabric_base_package
        remapThese.forEach((key,value) -> relocate "net.minecraft.${key}", "net.minecraft.${value}")
    }
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.finalizedBy('remapJar')
tasks.jar.finalizedBy('shadowJar')
tasks.jar.dependsOn(':fabric:build')