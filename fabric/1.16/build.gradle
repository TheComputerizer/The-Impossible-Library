buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.fasterxml.jackson.core', 'com.fasterxml.jackson', 'com.fasterxml',
                  'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone', 'com.google.guava',
                  'com.google.j2objc', 'commons-io', 'io.fabric8', 'io.github.goooler.shadow', 'io.netty',
                  'jakarta.platform', 'me.jamiemansfield', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven', 'org.benf', 'org.cadixdev',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jdt', 'org.eclipse.jetty', 'org.eclipse.platform', 'org.jdom',
                  'org.jetbrains', 'org.jetbrains.kotlinx', 'org.junit', 'org.mockito', 'org.ow2', 'org.ow2.asm',
                  'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.vafer',
                  'org.zeroturnaround'].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Fabric'
            url = uri('https://maven.fabricmc.net/')
            content {
                [ 'fabric-loom', 'net.fabricmc', 'net.fabricmc.fabric-api' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath('fabric-loom:fabric-loom.gradle.plugin:1.+')
        classpath('io.github.goooler.shadow:shadow-gradle-plugin:8.+')
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\fabric.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('fabric-loom')

def file = "build\\libs\\${mod_id}-${mod_version}.jar"
def classes = 'build\\classes\\java\\main'
def sources = "-Dtil.dev.sources=api\\${file};shared\\1.16\\${file};fabric\\1.16\\${classes}"
def args = [
        '-Dfabric.log.level=debug', '-Dtil.dev=true', sources, //'-Dtil.dev.testModLoading=true',
        '-Dtil.classpath.mods=mods.thecomputerizer.theimpossiblelibrary.api.common.TILCommonEntryPoint',
        '-Dtil.classpath.coremods=mods.thecomputerizer.theimpossiblelibrary.api.core.TILCoreEntryPoint'
]

[ runClient, runServer ].forEach { it.jvmArgs args}

repositories {
    maven {
        name 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
}

def shared = project(':shared:shared.1_16')

dependencies {
    minecraft("com.mojang:minecraft:${shared.minecraft_version}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${shared.minecraft_version}:${shared.parchment_version}@zip")
    }
    implementation(project(path: ':api', configuration: 'dev'))
    implementation(project(path: ':fabric', configuration: 'dev'))
    //The shared module builds with forge but since it only touches vanilla code this is fine
    implementation(project(path: ':shared:shared.1_16',configuration: 'dev'))

    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${shared.fabric_version}+1.16")
    modImplementation("maven.modrinth:cloth-config:${cloth_version}")
    modImplementation("maven.modrinth:modmenu:${modmenu_version}")
}

remapJar {
    setArchiveBaseName("${mod_id}_remapped")
    inputFile = tasks.shadowJar.archiveFile
}

processResources {
    from(project(':api').processResources.outputs)
}

processTestResources {
    from(project(':api').processTestResources.outputs)
}

compileJava {
    source(project(':fabric').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':fabric').sourceSets.test.allJava)
}

jar {
    from(project(':fabric').jar.archiveFile.collect { zipTree(it) })
    manifest {
        attributes([
                'Implementation-Title': name,
                'Implementation-Version': version
        ])
    }
}

//Due to the shared forge base we need to remap some stuff so the version specific code can stay centralized
def remapThese = [ 'block.AbstractBlock': 'world.level.block.state.BlockBehaviour',
                   'block.BlockState': 'world.level.block.state.BlockState',
                   'block.Block': 'world.level.block.Block',
                   'block.material.MaterialColor': 'world.level.material.MaterialColor',
                   'block.material.Material': 'world.level.material.Material',
                   'client.GameSettings': 'client.Options',
                   'client.KeyboardListener': 'client.KeyboardHandler',
                   'client.MouseHelper': 'client.MouseHandler',
                   'client.audio.ISound': 'client.resources.sounds.SoundInstance',
                   'client.audio.SimpleSound': 'client.resources.sounds.SimpleSoundInstance',
                   'client.audio.SoundHandler': 'client.sounds.SoundManager',
                   'client.entity.player.ClientPlayerEntity': 'client.player.LocalPlayer',
                   'client.gui.FontRenderer': 'client.gui.Font',
                   'client.gui.fonts.TextInputUtil': 'client.gui.font.TextFieldHelper',
                   'client.gui.screen.Screen': 'client.gui.screens.Screen',
                   'client.network.play.ClientPlayNetHandler': 'client.multiplayer.ClientPacketListener',
                   'client.network.play.NetworkPlayerInfo': 'client.multiplayer.PlayerInfo',
                   'client.settings.KeyBinding': 'client.KeyMapping',
                   'client.util.ITooltipFlag': 'world.item.TooltipFlag',
                   'client.world.ClientWorld': 'client.multiplayer.ClientLevel',
                   'command.CommandException': 'commands.CommandRuntimeException',
                   'command.CommandSource': 'commands.CommandSourceStack',
                   'command.ISuggestionProvider': 'commands.SharedSuggestionProvider',
                   'command.': 'commands.',
                   'entity.passive.animal.AnimalEntity': 'world.entity.animal.Animal',
                   'entity.passive.animal.TameableEntity': 'world.entity.TamableAnimal',
                   'entity.player.PlayerEntity': 'world.entity.player.Player',
                   'entity.player.PlayerInventory': 'world.entity.player.Inventory',
                   'entity.player.ServerPlayerEntity': 'server.level.ServerPlayer',
                   'entity': 'world.entity',
                   'item.AxeItem': 'world.item.AxeItem',
                   'item.BlockItem': 'world.item.BlockItem',
                   'item.HoeItem': 'world.item.HoeItem',
                   'item.IItemPropertyGetter': 'client.renderer.item.ItemPropertyFunction',
                   'item.IItemTier': 'world.item.Tier',
                   'item.ItemStack': 'world.item.ItemStack',
                   'item.ItemTier': 'world.item.Tiers',
                   'item.ItemUseContext': 'world.item.context.UseOnContext',
                   'item.ItemModelsProperties': 'client.renderer.item.ItemProperties',
                   'item.Item': 'world.item.Item',
                   'item.MusicDiscItem': 'world.item.RecordItem',
                   'item.PickaxeItem': 'world.item.PickaxeItem',
                   'item.ShovelItem': 'world.item.ShovelItem',
                   'item.SwordItem': 'world.item.SwordItem',
                   'item.ToolItem': 'world.item.TieredItem',
                   'nbt.ByteArrayNBT': 'nbt.ByteArrayTag',
                   'nbt.ByteNBT': 'nbt.ByteTag',
                   'nbt.CollectionNBT': 'nbt.CollectionTag',
                   'nbt.CompoundNBT': 'nbt.CompoundTag',
                   'nbt.CompressedStreamTools': 'nbt.NbtIo',
                   'nbt.DoubleNBT': 'nbt.DoubleTag',
                   'nbt.EndNBT': 'nbt.EndTag',
                   'nbt.FloatNBT': 'nbt.FloatTag',
                   'nbt.IntArrayNBT': 'nbt.IntArrayTag',
                   'nbt.IntNBT': 'nbt.IntTag',
                   'nbt.INBT': 'nbt.Tag',
                   'nbt.ListNBT': 'nbt.ListTag',
                   'nbt.LongArrayNBT': 'nbt.LongArrayTag',
                   'nbt.LongNBT': 'nbt.LongTag',
                   'nbt.NBTSizeTracker': 'nbt.NbtAccounter',
                   'nbt.NumberNBT': 'nbt.NumericTag',
                   'nbt.ShortNBT': 'nbt.ShortTag',
                   'nbt.StringNBT': 'nbt.StringTag',
                   'potion.Effect': 'world.effect.MobEffect',
                   'potion.EffectInstance': 'world.effect.MobEffectInstance',
                   'server.management.PlayerList': 'server.players.PlayerList',
                   'state.Property': 'world.level.block.state.properties.Property',
                   'state.StateContainer': 'world.level.block.state.StateDefinition',
                   'tileentity.ITickableTileEntity': 'world.level.block.entity.TickableBlockEntity',
                   'tileentity.TileEntity': 'world.level.block.entity.BlockEntity',
                   'util.ActionResultType': 'world.InteractionResult',
                   'util.Direction': 'core.Direction',
                   'util.Hand': 'world.InteractionHand',
                   'util.RegistryKey': 'resources.ResourceKey',
                   'util.ResourceLocation': 'resources.ResourceLocation',
                   'util.SharedConstants': 'SharedConstants',
                   'util.SoundCategory': 'sounds.SoundSource',
                   'util.SoundEvent': 'sounds.SoundEvent',
                   'util.math.AxisAlignedBB': 'world.phys.AABB',
                   'util.math.BlockPos': 'core.BlockPos',
                   'util.math.BlockRayTraceResult': 'world.phys.BlockHitResult',
                   'util.math.vector.Vector3d': 'world.phys.Vec3',
                   'util.registry.DynamicRegistries': 'core.RegistryAccess',
                   'util.registry.MutableRegistry': 'core.WritableRegistry',
                   'util.registry.Registry': 'core.Registry',
                   'util.text.IFormattableTextComponent': 'network.chat.MutableComponent',
                   'util.text.ITextComponent': 'network.chat.Component',
                   'util.text.StringTextComponent': 'network.chat.TextComponent',
                   'util.text.Style': 'network.chat.Style',
                   'util.text.TextFormatting': 'ChatFormatting',
                   'util.text.TranslationTextComponent': 'network.chat.TranslatableComponent',
                   'world.biome.Biome': 'world.level.biome.Biome',
                   'world.gen.feature.structure.StructureManager': 'world.level.StructureFeatureManager',
                   'world.gen.feature.structure.StructureStart': 'world.level.levelgen.structure.StructureStart',
                   'world.gen.feature.structure.Structure': 'world.level.levelgen.feature.StructureFeature',
                   'world.lighting.WorldLightManager': 'world.level.lighting.LevelLightEngine',
                   'world.raid.RaidManager': 'world.entity.raid.Raids',
                   'world.raid.Raid': 'world.entity.raid.Raid',
                   'world.server.ServerWorld': 'server.level.ServerLevel',
                   'world.storage.IWorldInfo': 'world.level.storage.LevelData',
                   'world.DimensionType': 'world.level.dimension.DimensionType',
                   'world.Explosion': 'world.level.Explosion',
                   'world.GameType': 'world.level.GameType',
                   'world.IBlockReader': 'world.level.BlockGetter',
                   'world.IWorldReader': 'world.level.LevelReader',
                   'world.IWorld': 'world.level.LevelAccessor',
                   'world.LightType': 'world.level.LightLayer',
                   'world.World': 'world.level.Level'
]

//These need to be remapped to the com.mojang.blaze3d package
def renderRemaps = [ 'net.minecraft.client.MainWindow': 'platform.Window',
                     'net.minecraft.client.renderer.BufferBuilder': 'vertex.BufferBuilder',
                     'net.minecraft.client.renderer.Tessellator': 'vertex.Tesselator',
                     'net.minecraft.client.renderer.vertex.DefaultVertexFormats': 'vertex.DefaultVertexFormat',
                     'net.minecraft.client.renderer.vertex.Vertex': 'vertex.Vertex',
                     'com.mojang.blaze3d.matrix.MatrixStack': 'vertex.PoseStack',
                     'com.mojang.blaze3d.vertex.IVertexBuilder': 'vertex.VertexConsumer'
]

shadowJar {
    shared.afterEvaluate {
        from(shared.jar.archiveFile.collect { zipTree(it) })
        //noinspection GroovyAssignabilityCheck
        relocate shared.shared_base_package, fabric_base_package
        remapThese.forEach((key,value) -> relocate "net.minecraft.${key}", "net.minecraft.${value}")
        renderRemaps.forEach((key,value) -> relocate key, "com.mojang.blaze3d.${value}")
    }
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.finalizedBy('remapJar')
tasks.jar.finalizedBy('shadowJar')
tasks.jar.dependsOn(':fabric:build')