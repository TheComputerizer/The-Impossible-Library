/**
 * Common builds and sources relevant to all Fabric modules
 *
 * Base is 1.16.5
 */

buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.fasterxml.jackson.core', 'com.fasterxml.jackson', 'com.fasterxml',
                  'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone', 'com.google.guava',
                  'com.google.j2objc', 'commons-io', 'io.fabric8', 'io.netty', 'jakarta.platform', 'me.jamiemansfield',
                  'org.apache', 'org.apache.ant', 'org.apache.commons', 'org.apache.logging',
                  'org.apache.logging.log4j', 'org.apache.maven', 'org.benf', 'org.cadixdev', 'org.checkerframework',
                  'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox', 'org.eclipse.ee4j',
                  'org.eclipse.jdt', 'org.eclipse.jetty', 'org.eclipse.platform', 'org.jdom', 'org.jetbrains',
                  'org.jetbrains.kotlinx', 'org.junit', 'org.mockito', 'org.ow2', 'org.ow2.asm', 'org.slf4j',
                  'org.sonatype.oss', 'org.springframework', 'org.vafer',
                  'org.zeroturnaround'].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Fabric'
            url = uri('https://maven.fabricmc.net/')
            content {
                [ 'fabric-loom', 'net.fabricmc', 'net.fabricmc.fabric-api' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath("${loom_plugin}:${loom_version}")
    }
}

apply from: rootProject.file('gradle\\java8-module.gradle')
apply from: rootProject.file('gradle\\fabric.gradle')

plugins.apply('fabric-loom')

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

dependencies {
    minecraft("${fabric_mc}:${minecraft_1_16_5}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("${parchment_data}-${minecraft_1_16_5}:${parchment_1_16_5}@zip")
    }

    compileOnly(project(':api'))

    modImplementation("${fabric_loader_artifact}:${fabric_loader}")
    modImplementation("${fabric_api_artifact}:${fabric_1_16_5}")
}

loom.mixin.add(sourceSets.main,mod_refmap)

processResources {
    def replacements = [ 'adaptor': fabric_adaptor, 'coremods': fabric_coremods, 'injector': fabric_injector,
                         'version': version ]
    inputs.properties replacements
    from(project(':api').processResources.outputs) {
        filesMatching('fabric.mod.json') { expand replacements }
    }
}

processTestResources {
    from(project(':api').processTestResources.outputs)
}

jar {
    setArchiveBaseName(mod_id)
}

artifacts {
    dev jar
}