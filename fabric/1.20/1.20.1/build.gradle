buildscript {
    repositories {
        gradlePluginPortal() {
            content {
                [ 'com.fasterxml.woodstox', 'com.fasterxml.jackson.core', 'com.fasterxml.jackson', 'com.fasterxml',
                  'com.google.code.findbugs', 'com.google.code.gson', 'com.google.errorprone', 'com.google.guava',
                  'com.google.j2objc', 'commons-io', 'io.fabric8', 'io.github.goooler.shadow', 'io.netty',
                  'jakarta.platform', 'me.jamiemansfield', 'org.apache', 'org.apache.ant', 'org.apache.commons',
                  'org.apache.logging', 'org.apache.logging.log4j', 'org.apache.maven', 'org.benf', 'org.cadixdev',
                  'org.checkerframework', 'org.codehaus.groovy', 'org.codehaus.plexus', 'org.codehaus.woodstox',
                  'org.eclipse.ee4j', 'org.eclipse.jdt', 'org.eclipse.jetty', 'org.eclipse.platform', 'org.jdom',
                  'org.jetbrains', 'org.jetbrains.kotlinx', 'org.junit', 'org.mockito', 'org.ow2', 'org.ow2.asm',
                  'org.slf4j', 'org.sonatype.oss', 'org.springframework', 'org.vafer',
                  'org.zeroturnaround'].forEach { includeGroup it }
            }
        }
        maven {
            name = 'Fabric'
            url = uri('https://maven.fabricmc.net/')
            content {
                [ 'fabric-loom', 'net.fabricmc', 'net.fabricmc.fabric-api' ].forEach { includeGroup it }
            }
        }
    }
    dependencies {
        classpath("${loom_plugin}:${loom_version}")
        classpath("${shadow_plugin}:${shadow_version}")
    }
}

apply from: rootProject.file('gradle\\java17-module.gradle')
apply from: rootProject.file('gradle\\fabric.gradle')
apply from: rootProject.file('gradle\\shadow-relocate.gradle')

plugins.apply('fabric-loom')

def sources = "${dev_sources}=api/${build_file};shared/1.20/${build_file};shared/1.20/1.20.1/${build_file}" +
        ";fabric/1.20/${build_classes};fabric/1.20/1.20.1/${build_classes}"
def args = [ fabric_log_level, dev_arg, sources, common_entrypoint_arg, core_entrypoint_arg ]

[ runClient, runServer ].forEach { it.jvmArgs args}

repositories {
    maven {
        name 'Modrinth'
        url = uri('https://api.modrinth.com/maven')
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = 'CurseMaven'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'ModMaven'
        url = uri('https://modmaven.dev')
        content {
            includeGroup( 'mezz.jei')
        }
    }
}

dependencies {
    minecraft("${fabric_mc}:${minecraft_1_20_1}")
    mappings loom.layered() {
        officialMojangMappings()
        parchment("${parchment_data}-${minecraft_1_20_1}:${parchment_1_20_1}@zip")
    }
    implementation(project(path: ':api', configuration: 'dev'))
    implementation(project(path: ':fabric:1.20', configuration: 'dev'))
    implementation(project(path: ':shared:1.20:1.20.1', configuration: 'dev'))

    modImplementation("${fabric_loader_artifact}:${fabric_loader}")
    modImplementation("${fabric_api_artifact}:${fabric_1_20_1}")
    modImplementation("${cloth_artifact}:${cloth_1_20_1}")
    modImplementation("${configured_artifact}:${configured_fabric_1_20_1}")
    modImplementation("${modmenu_artifact}:${modmenu_1_20_1}")
    modImplementation("${serene_seasons_artifact}:${serene_seasons_fabric_1_20_1}")

    modRuntimeOnly("${jei_artifact}:${jei_fabric_1_20_1}")
}

remapJar {
    setArchiveBaseName("${mod_id}_remapped")
    inputFile = tasks.shadowJar.archiveFile
}

processResources {
    from(project(':api').processResources.outputs)
}

processTestResources {
    from(project(':api').processTestResources.outputs)
}

compileJava {
    source(project(':fabric').sourceSets.main.allJava)
}

compileTestJava {
    source(project(':fabric').sourceSets.test.allJava)
}

jar {
    setArchiveBaseName(mod_id)
    from(project(':fabric').jar.archiveFile.collect { zipTree(it) })
}

shadowJar {
    def shared = project(':shared:1.20:1.20.1')
    from(project(':api').jar.archiveFile.collect { zipTree(it) })
    shared.afterEvaluate {
        from(shared.jar.archiveFile.collect { zipTree(it) })
        relocate "${shared_base_package}", "${fabric_base_package}"
    }
}

tasks.assemble.dependsOn(shadowJar)
tasks.shadowJar.finalizedBy('remapJar')
tasks.jar.finalizedBy('shadowJar')
tasks.jar.dependsOn(':fabric:1.20:build')